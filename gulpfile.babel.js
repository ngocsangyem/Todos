import glob from 'glob';
import path from 'path';
import gulp from 'gulp';
import gulpLoadPlugins from 'gulp-load-plugins';
import minimist from 'minimist';
import config from './config';
import browserSyncLib from 'browser-sync';
import gutil from 'gulp-util';
import notifier from 'node-notifier';

const defaultNotification = function(err) {
	return {
		subtitle: err.plugin,
		message: err.message,
		sound: 'Funk',
		onLast: true,
	};
};

const cfg = Object.assign({}, config, defaultNotification);
const plugins = gulpLoadPlugins({ lazy: true });
const args = minimist(process.argv.slice(2));
const dirs = cfg.dir;
const taskTarget = args.production ? dirs.build : dirs.destination;
const browserSync = browserSyncLib.create();
const isProd = process.env.NODE_ENV === 'production';
const isTest = process.env.NODE_ENV === 'test';
const isDev = !isProd && !isTest;

const nth = {};
nth.config = config;

let message =
	'\n ATTENTION! This file is automatically generated.\n Any changes to this file will be lost during the next compilation.\n Any change to the project without the possibility of compiling is 2-5 times more expensive and more expensive.\n\n';
function showError(preffix, err) {
	gutil.log(
		gutil.colors.white.bgRed(' ' + preffix + ' '),
		gutil.colors.white.bgBlue(' ' + err.message + ' ')
	);
	notifier.notify({
		title: preffix,
		message: err.message,
	});
	this.emit('end');
}

glob.sync('./gulp/tasks/**/*.js')
	.filter(function(file) {
		return /\.(js)$/i.test(file);
	})
	.map(function(file) {
		require(file)(
			gulp,
			plugins,
			args,
			cfg,
			taskTarget,
			browserSync,
			isProd,
			message,
			showError
		);
	});

gulp.task(
	'serve',
	gulp.series([
		'clean',
		'injectSASS',
		gulp.parallel(
			'pug',
			'sass',
			// 'buildJs',
			'buildTs',
			'font',
			'image',
			'concatCSS',
			'concatJS'
		),
		'browserSync',
	])
);

gulp.task(
	'build',
	gulp.series([
		'clean',
		'injectSASS',
		gulp.parallel(
			'pug',
			'sass',
			// 'buildJs',
			'buildTs',
			'font',
			'image',
			'concatCSS',
			'concatJS'
		),
	])
);
