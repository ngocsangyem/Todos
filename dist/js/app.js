(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var todo_service_1 = require("./service/todo.service");

var TodoList =
/** @class */
function () {
  function TodoList(todos) {
    this.todoService = new todo_service_1.TodoService(todos);
  }

  TodoList.prototype.todoCountTask = function () {
    var todoCount = document.querySelector('.td__header-count');
    return todoCount.innerHTML = this.todoService.countTask(todoCount);
  };

  TodoList.prototype.todoAddTask = function (input) {
    this.todoService.render(input);
  };

  TodoList.prototype.todoDeleteTask = function (index) {
    return this.todoService.deleteTask(index);
  };

  TodoList.prototype.todoActiveTask = function () {
    var todosActiveTask = this.todoService.activeTask();
    return this.todoService.renderFilter(todosActiveTask);
  };

  TodoList.prototype.todoInit = function () {
    var _this = this;

    var todoInput = document.getElementById('todoInput');
    var todoFooter = document.querySelector('.td__footer');
    var todoTaskWrapper = document.getElementById('bodyTasks');
    var todoBtnActive = document.querySelector('.td__footer-filter--active');
    todoInput.addEventListener('keypress', function (event) {
      if (event.key === 'Enter') {
        _this.todoAddTask(todoInput.value);

        todoInput.value = '';
        todoFooter.style.display = 'flex';

        _this.todoCountTask();
      }
    });
    todoTaskWrapper.addEventListener('click', function (event) {
      var parentId = event.target.parentNode.parentNode.id;
      var parentTask = event.target.parentNode.parentNode;

      _this.todoDeleteTask(parentId);

      if (parentTask) {
        todoTaskWrapper.removeChild(parentTask);
      }

      _this.todoCountTask();
    });
    todoBtnActive.addEventListener('click', function () {
      console.log(todoTaskWrapper.firstChild);

      _this.todoActiveTask();
    });
  };

  return TodoList;
}();

var todoApp = new TodoList([]);
todoApp.todoInit();

},{"./service/todo.service":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var state = false;

var TodoService =
/** @class */
function () {
  function TodoService(todos) {
    // state: boolean = false;
    this.id = 0;
    this.todos = [];
  }

  TodoService.prototype.generateId = function (length) {
    var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHUJKLMNOPQRSTUVWXYZ';
    var ID = '';

    for (var i = 0; i < length; i += 1) {
      ID += chars.charAt(Math.floor(Math.random() * chars.length));
    }

    return 'task-' + ID;
  };

  TodoService.prototype.addTask = function (task) {
    var todo = {
      id: this.generateId(4),
      name: task,
      state: false
    };
    this.todos.push(todo);
    console.log(this.todos);
    return todo;
  };

  TodoService.prototype.renderTaskFilter = function (task) {
    var html, container;
    container = document.getElementById('bodyTasks');
    html = "<li class=\"td__body-task" + (task.state === true ? ' td__body-task--complete' : '') + "\" id=\"" + task.id + "\" data-id=\"" + task.id + "\">\n\t\t\t<input class=\"td__body-task--toggle\" type=\"checkbox\">\n\t\t\t<span>" + task.name + "</span>\n\t\t\t<button class=\"td__body-task--destroy\" data-button-id=\"" + task.id + "\"><i class=\"mdi mdi-window-close\"></i></button>\n\t\t</li>";
    container.insertAdjacentHTML("beforeend", html);
  };

  TodoService.prototype.renderTask = function (task) {
    var _this = this;

    var container = document.getElementById('bodyTasks');
    var html, newHtml, htmlDom;
    html = "<li class=\"td__body-task" + (task.state === true ? ' td__body-task--complete' : '') + "\" id=\"" + task.id + "\" data-id=\"" + task.id + "\">\n\t\t\t\t\t<input class=\"td__body-task--toggle\" type=\"checkbox\">\n\t\t\t\t\t<span>" + task.name + "</span>\n\t\t\t\t\t<button class=\"td__body-task--destroy\" data-button-id=\"" + task.id + "\"><i class=\"mdi mdi-window-close\"></i></button>\n\t\t\t\t</li>";
    container.insertAdjacentHTML("beforeend", html);
    var findId = document.querySelector("[data-id=\"" + task.id + "\"]");

    if (findId) {
      findId.addEventListener('click', function (event) {
        _this.toggleState(task);

        findId.classList.toggle('td__body-task--complete');
      });
    }
  };

  TodoService.prototype.findId = function () {
    return this.todos.map(function (todo) {
      return todo.id;
    });
  };

  TodoService.prototype.render = function (input) {
    var newItem;
    newItem = this.addTask(input);
    console.log(newItem);
    this.renderTask(newItem);
  };

  TodoService.prototype.renderFilter = function (tasks) {
    for (var index = 0; index < tasks.length; index++) {
      var element = tasks[index];
      this.renderTaskFilter(element);
    }
  };

  TodoService.prototype.deleteTask = function (index) {
    var item, ids;
    ids = this.findId();
    item = ids.indexOf(index);

    if (item !== -1) {
      this.todos.splice(item, 1);
    }

    return this.todos;
  };

  TodoService.prototype.clearCompleteTask = function () {
    this.todos = this.todos.filter(function (todo) {
      return todo.state === true;
    });
  };

  TodoService.prototype.allTask = function () {
    return this.todos.slice();
  };

  TodoService.prototype.activeTask = function () {
    return this.todos = this.todos.slice().filter(function (todo) {
      return todo.state === false;
    });
  };

  TodoService.prototype.completeTask = function () {
    return this.todos = this.todos.filter(function (todo) {
      return todo.state === true;
    });
  };

  TodoService.prototype.countTask = function (countElement) {
    if (this.todos.length > 0) {
      countElement.style.display = 'block';
    } else {
      countElement.style.display = 'none';
    }

    return String(this.todos.length);
  };

  TodoService.prototype.toggleState = function (todo) {
    todo.state = !todo.state;
    return todo.state;
  };

  return TodoService;
}();

exports.TodoService = TodoService;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
